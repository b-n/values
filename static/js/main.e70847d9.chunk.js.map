{"version":3,"sources":["serviceWorker.ts","elo.ts","App.tsx","index.tsx"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","EloOutcome","getKFactor","rank","useStyles","makeStyles","theme","root","flexGrow","container","marginTop","alignItems","indicator","margin","card","textAlign","display","backgroundColor","palette","primary","dark","color","option","height","main","Value","outcome","className","onClick","children","classes","Card","CardActionArea","CardContent","getNewPlayers","values","dataSet","filter","value","matches","length","size","numbers","_","random","name","App","useState","isCollecting","setIsCollecting","valuesList","map","score","setValues","players","setPlayers","useEffect","handleClick","value1","find","value2","challenger","opponent","probabiltyOfWin","Math","pow","calculateNewRatings","rating1","rating2","newValues","slice","sort","a","b","newPlayers","Container","maxWidth","Grid","justify","spacing","item","xs","sm","CHALLENGER","Typography","variant","OPPONENT","DRAW","Chip","label","avatar","Avatar","v","TableContainer","component","Paper","Table","TableHead","TableRow","TableCell","align","TableBody","key","round","createMuiTheme","secondary","ReactDOM","render","StrictMode","ThemeProvider","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.e70847d9.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","type ELORank = number\n\nexport enum EloOutcome {\n  DRAW = 0.5,\n  CHALLENGER = 1,\n  OPPONENT = 0,\n}\n\nconst getKFactor = (rank: ELORank): number => {\n  if (rank < 2100) return 32\n  if (rank < 2400) return 24\n  return 16\n}\n\nconst calculateNewRatings = (challenger: ELORank, opponent: ELORank, outcome: EloOutcome): [ELORank, ELORank] => {\n  const probabiltyOfWin =\n    1 / (\n      1 + Math.pow(\n        10,\n        (opponent - challenger) / 400\n      )\n    )\n\n  return [\n    challenger + (getKFactor(challenger) * (outcome - probabiltyOfWin)),\n    opponent + (getKFactor(opponent) * ((1 - outcome) - (1 - probabiltyOfWin))),\n  ]\n}\n\nexport {\n  calculateNewRatings,\n}\n","import React, { useState, useEffect } from 'react';\nimport _ from 'lodash'\nimport {\n  Avatar,\n  Container,\n  Card,\n  CardContent,\n  CardActionArea,\n  Chip,\n  Grid,\n  Typography,\n  TableContainer,\n  Table,\n  TableHead,\n  TableBody,\n  TableRow,\n  TableCell,\n  Paper,\n} from '@material-ui/core'\nimport { makeStyles } from '@material-ui/core/styles'\n\nimport valuesList from'./values.json'\n\nimport { EloOutcome, calculateNewRatings } from './elo'\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n  },\n  container: {\n    marginTop: 20,\n    alignItems: 'center',\n  },\n  indicator: {\n    margin: '2em 1em 2em 0em',\n  },\n  card: {\n    textAlign: 'center',\n    display: 'flex',\n    backgroundColor: theme.palette.primary.dark,\n    color: 'white',\n  },\n  option: {\n    height: 120,\n    backgroundColor: theme.palette.primary.main,\n    color: 'black',\n  },\n}))\n\ninterface ValueProps {\n  outcome: EloOutcome\n  className?: string\n  onClick: (outcome: EloOutcome) => void\n  children: React.ReactNode\n}\n\nconst Value: React.FC<ValueProps> = ({ outcome, className, onClick, children }) => {\n  const classes = useStyles();\n\n  return (\n    <Card className={`${classes.card} ${className || ''}`}>\n      <CardActionArea onClick={() => onClick(outcome)}>\n        <CardContent>\n          {children}\n        </CardContent>\n      </CardActionArea>\n    </Card>\n  );\n}\n\nconst maxMatches = 5;\n\nconst getNewPlayers = (values: Array<Val>): [string, string] => {\n  const dataSet = values.filter(value => value.matches < maxMatches);\n  if (dataSet.length <= 0) return ['',''];\n  const size = dataSet.length - 1;\n  const numbers = [ _.random(0, size, false), _.random(0, size, false) ];\n  while (numbers[0] === numbers[1]) {\n    numbers[1] = _.random();\n  }\n  return [dataSet[numbers[0]].name, dataSet[numbers[1]].name]\n}\n\ninterface Val {\n  name: string\n  score: number\n  matches: number\n}\n\nconst App = () => {\n  const classes = useStyles();\n  const [ isCollecting, setIsCollecting ] = useState(true);\n  const [ values, setValues ] = useState<Array<Val>>(valuesList.map(name => ({ name, score: 1000, matches: 0 })));\n\n  const [ players, setPlayers ] = useState(['', '']);\n\n  useEffect(() => {\n    setPlayers(getNewPlayers(values));\n  }, [])\n\n  useEffect(() => {\n  }, [ values ]);\n\n  const handleClick = (outcome: EloOutcome) => {\n    const value1 = values.find(({ name }) => name === players[0]);\n    const value2 = values.find(({ name }) => name === players[1]);\n    const [ rating1, rating2 ] = calculateNewRatings(value1!.score, value2!.score, outcome);\n    const newValues = values.slice().map(value => {\n      if (value.name === value1!.name) {\n        value.score = rating1;\n        value.matches++;\n      }\n      if (value.name === value2!.name) {\n        value.score = rating2;\n        value.matches++;\n      }\n      return value;\n    });\n\n    newValues.sort((a, b) => b.score - a.score);\n    setValues(newValues);\n    const newPlayers = getNewPlayers(values);\n    if (newPlayers[0] === '') {\n      setIsCollecting(false);\n      return;\n    }\n    setPlayers(newPlayers);\n  }\n\n  return (\n    <Container maxWidth=\"md\">\n      {\n        isCollecting && \n        <Grid container justify=\"center\" spacing={3} className={classes.container}>\n          <Grid item xs={12} sm={6}>\n            <Value outcome={EloOutcome.CHALLENGER} onClick={handleClick} className={classes.option}>\n              <Typography variant=\"h4\">{players[0]}</Typography>\n            </Value>\n          </Grid>\n          <Grid item xs={12} sm={6}>\n            <Value outcome={EloOutcome.OPPONENT} onClick={handleClick} className={classes.option}>\n              <Typography variant=\"h4\">{players[1]}</Typography>\n            </Value>\n          </Grid>\n          <Grid item xs={12}>\n            <Value outcome={EloOutcome.DRAW} onClick={handleClick}>\n              <Typography variant=\"h6\">Draw</Typography>\n            </Value>\n          </Grid>\n        </Grid>\n      }\n      <Chip\n        className={classes.indicator}\n        label=\"no matches\"\n        color='secondary'\n        avatar={<Avatar>{values.filter(v => v.matches === 0).length}</Avatar>}\n      />\n      <Chip\n        className={classes.indicator}\n        label=\"completed\"\n        color='secondary'\n        avatar={<Avatar>{values.filter(v => v.matches === maxMatches).length}</Avatar>}\n      />\n      <TableContainer component={Paper}>\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableCell>Value</TableCell>\n              <TableCell align=\"right\">Score</TableCell>\n              <TableCell align=\"right\">Matches</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {values.map(value => ( \n            <TableRow key={value.name}>\n              <TableCell>{value.name}</TableCell>\n              <TableCell align=\"right\">{_.round(value.score - 1000)}</TableCell>\n              <TableCell align=\"right\">{value.matches}</TableCell>\n            </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </Container>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\n\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\nimport App from './App';\n\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: '#A68B50',\n      dark: '#594519'\n    },\n    secondary: {\n      main: '#8DAEF2',\n    }\n  },\n})\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.register();\n"],"sourceRoot":""}